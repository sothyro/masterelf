import 'package:flutter/material.dart';
import 'package:lunar/lunar.dart';
import 'dart:ui' as ui;

void main() {
  runApp(
    const MaterialApp(
      home: DateSelectionScreen(),
    ),
  );
}

class DateSelectionScreen extends StatefulWidget {
  const DateSelectionScreen({super.key});

  @override
  State<DateSelectionScreen> createState() => _DateSelectionScreenState();
}

class _DateSelectionScreenState extends State<DateSelectionScreen> {
  DateTime _selectedDate = DateTime.now(); // Default to the current date

  // Function to generate the lunar calendar grid for the current month
  List<Widget> _buildCalendarGrid() {
    final int daysInMonth = DateTime(_selectedDate.year, _selectedDate.month + 1, 0).day;
    final int firstWeekday = DateTime(_selectedDate.year, _selectedDate.month, 1).weekday;

    List<Widget> grid = [];

    // Add empty cells for days before the first day of the month
    for (int i = 1; i < firstWeekday; i++) {
      grid.add(const SizedBox.shrink()); // Empty cell
    }

    // Add cells for each day in the month
    for (int day = 1; day <= daysInMonth; day++) {
      final DateTime currentDay = DateTime(_selectedDate.year, _selectedDate.month, day);
      final Lunar currentLunar = Lunar.fromDate(currentDay);

      grid.add(
        GestureDetector(
          onTap: () => _showDayDetails(currentLunar, currentDay),
          child: Container(
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    '$day', // Solar day
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white, // Numerical text in white
                    ),
                  ),
                  Text(
                    currentLunar.getDayInChinese(), // Lunar day in Chinese
                    style: const TextStyle(fontSize: 12, color: Colors.blue),
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }

    return grid;
  }

  void _showDayDetails(Lunar lunar, DateTime solarDate) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          backgroundColor: Colors.deepPurpleAccent.withOpacity(0.4),
          content: BackdropFilter(
            filter: ui.ImageFilter.blur(sigmaX: 10.0, sigmaY: 10.0),
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.5),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: Colors.white.withOpacity(0.3),
                  width: 1.5,
                ),
              ),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // Add the image here
                    Center(
                      child: Image.asset(
                        'assets/images/logo.png',
                        width: 64,
                        height: 64,
                        fit: BoxFit.cover,
                      ),
                    ),
                    const SizedBox(height: 8), // Add some spacing between the image and the text
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '‚òÄÔ∏è ·ûü·ûº·ûö·û∑·ûô·ûÇ·ûè·û∑: ${solarDate.toLocal().toString().split(' ')[0]}',
                          textAlign: TextAlign.center,
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                            fontFamily: 'Dangrek',
                          ),
                        ),
                        Text(
                          'üåô ·ûÖ·üê·ûì·üí·ûë·ûÇ·ûè·û∑: ${lunar.toString()}',
                          textAlign: TextAlign.center,
                          style: const TextStyle(
                            fontSize: 12,
                            color: Colors.white,
                            fontFamily: 'Dangrek',
                          ),
                        ),
                        const SizedBox(height: 16),
                        Text(
                          '‚òØÔ∏è ·ûè·ûΩ·ûö·û∂·ûü·û∏·ûê·üí·ûÑ·üÉ·û†·üÅ·ûÑ·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá',
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: Colors.deepPurple,
                            fontFamily: 'Dangrek',
                          ),
                        ),
                        Text(
                          _getAuspiciousZodiacSigns(lunar).join(', '),
                          textAlign: TextAlign.center,
                          style: const TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                            fontFamily: 'Siemreap',
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '‚òØÔ∏è ·ûè·ûΩ·ûö·û∂·ûü·û∏·ûê·üí·ûÑ·üÉ·ûÜ·ûª·ûÑ·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá',
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: Colors.amberAccent,
                            fontFamily: 'Dangrek',
                          ),
                        ),
                        Text(
                          _getConflictingZodiacSigns(lunar).join(', '),
                          textAlign: TextAlign.center,
                          style: const TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                            fontFamily: 'Siemreap',
                          ),
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'üßß ·ûÄ·û∑·ûÖ·üí·ûÖ·ûÄ·û∂·ûö·ûä·üÇ·ûö·ûí·üí·ûú·ûæ·û†·ûæ·ûô·û†·üÅ·ûÑ·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá',
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: Colors.deepPurple,
                            fontFamily: 'Dangrek',
                          ),
                        ),
                        Text(
                          _getAuspiciousActivities(lunar),
                          style: const TextStyle(
                            fontSize: 12,
                            color: Colors.white,
                            fontFamily: 'Siemreap',
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '‚ö° ·ûî·üí·ûö·ûô·üê·ûè·üí·ûì·ûü·üä·ûô ·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá·û†·û∂·ûò',
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: Colors.amberAccent,
                            fontFamily: 'Dangrek',
                          ),
                        ),
                        Text(
                          _getInauspiciousActivities(lunar),
                          style: const TextStyle(
                            fontSize: 12,
                            color: Colors.white,
                            fontFamily: 'Siemreap',
                          ),
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'üí∏ ·ûõ·û∂·ûó·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá',
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: Colors.deepPurple,
                            fontFamily: 'Dangrek',
                          ),
                        ),
                        Text(
                          _getDailyFortune(lunar),
                          style: const TextStyle(
                            fontSize: 12,
                            color: Colors.white,
                            fontFamily: 'Siemreap',
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'üëº ·ûë·üÅ·ûú·ûè·û∂·ûö·ûÄ·üí·ûü·û∂·ûÄ·ûº·ûì·û¢·üí·ûì·ûÄ·ûÅ·üÇ·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá',
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: Colors.deepPurple,
                            fontFamily: 'Dangrek',
                          ),
                        ),
                        Text(
                          '${_getMonthlyFetalPosition(lunar)} ${_getDailyFetalPosition(lunar)}',
                          style: const TextStyle(
                            fontSize: 12,
                            color: Colors.white,
                            fontFamily: 'Siemreap',
                          ),
                        ),
                        const SizedBox(height: 8),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
          actions: [
            Center(
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.deepPurpleAccent.withOpacity(0.5),
                  foregroundColor: Colors.white,
                  textStyle: const TextStyle(fontFamily: 'Dangrek'),
                ),
                onPressed: () => Navigator.pop(context),
                child: const Text('·ûô·ûõ·üã·ûñ·üí·ûö·ûò'),
              ),
            ),
          ],
        );
      },
    );
  }

  // Get Daily Fortune (using getDayLu)
  String _getDailyFortune(Lunar lunar) {
    // getDayLu() returns a String containing the fortunes for the day
    final String dailyFortunesString = lunar.getDayLu();

    // Split the string into a list of fortunes
    final List<String> dailyFortunes = dailyFortunesString.split(',');

    // Check if the list is empty before attempting to join
    if (dailyFortunes.isEmpty) {
      return "·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá·ûò·û∑·ûì·ûò·û∂·ûì·ûõ·û∂·ûó·ûü·üÜ·ûé·û∂·ûÑ·ûü·üÑ·üá"; // Or some other default message
    }

    // Join the fortunes into a single string, separated by commas
    return dailyFortunes.join(', ');
  }

  String _getDailyFetalPosition(Lunar lunar) {
    //getDayPositionTai() directly returns the Chinese string representation of the daily fetal position
    // You don't need to use getDayPositionTaiDesc.
    final String dailyFetalPosition = lunar.getDayPositionTai();

    // You can translate the Chinese position into Khmer here if needed
    return _translateFetalPositionToKhmer(dailyFetalPosition);
  }

  // Get Monthly Fetal Position (using getMonthPositionTai)
  String _getMonthlyFetalPosition(Lunar lunar) {
    // getMonthPositionTai() directly returns the Chinese string representation of the monthly fetal position.
    // You don't need to use getMonthPositionTaiDesc.
    final String monthlyFetalPosition = lunar.getMonthPositionTai();

    // You can translate the Chinese position into Khmer here if needed
    return _translateFetalPositionToKhmer(monthlyFetalPosition);
  }

  // Translate Fetal Position To Khmer
  String _translateFetalPositionToKhmer(String text) {
    switch (text) {
      case "ÊàøÂ∫ä":
        return "·ûî·ûì·üí·ûë·ûî·üã·ûÇ·üí·ûö·üÇ";
      case "Á¢ìÁ£®":
        return "·ûÄ·û∑·ûì·ûü·üí·ûö·ûº·ûú";
      case "Âé®ÁÅ∂":
        return "·ûï·üí·ûë·üá·ûî·û∂·ûô";
      case "Èó®":
        return "·ûë·üí·ûú·û∂·ûö";
      case "Âéï":
        return "·ûî·ûÑ·üí·ûÇ·ûì·üã";
      case "ÊàøÂÜÖ‰∏ú":
        return "·ûÄ·üí·ûì·ûª·ûÑ·ûî·ûì·üí·ûë·ûî·üã·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûÄ·ûæ·ûè";
      case "ÊàøÂÜÖÂçó":
        return "·ûÄ·üí·ûì·ûª·ûÑ·ûî·ûì·üí·ûë·ûî·üã·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûè·üí·ûî·ûº·ûÑ";
      case "ÊàøÂÜÖË•ø":
        return "·ûÄ·üí·ûì·ûª·ûÑ·ûî·ûì·üí·ûë·ûî·üã·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûõ·û∑·ûÖ";
      case "ÊàøÂÜÖÂåó":
        return "·ûÄ·üí·ûì·ûª·ûÑ·ûî·ûì·üí·ûë·ûî·üã·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûá·ûæ·ûÑ";
      case "ÊàøÂ∫äÂ§ñ‰∏ú":
        return "·ûÄ·üí·ûö·üÖ·ûî·ûì·üí·ûë·ûî·üã·ûÇ·üí·ûö·üÇ·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûÄ·ûæ·ûè";
      case "ÊàøÂ∫äÂ§ñÂçó":
        return "·ûÄ·üí·ûö·üÖ·ûî·ûì·üí·ûë·ûî·üã·ûÇ·üí·ûö·üÇ·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûè·üí·ûî·ûº·ûÑ";
      case "ÊàøÂ∫äÂ§ñË•ø":
        return "·ûÄ·üí·ûö·üÖ·ûî·ûì·üí·ûë·ûî·üã·ûÇ·üí·ûö·üÇ·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûõ·û∑·ûÖ";
      case "ÊàøÂ∫äÂ§ñÂåó":
        return "·ûÄ·üí·ûö·üÖ·ûî·ûì·üí·ûë·ûî·üã·ûÇ·üí·ûö·üÇ·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûá·ûæ·ûÑ";
      case "‰ªìÂ∫ì":
        return "·ûÉ·üí·ûõ·û∂·üÜ·ûÑ";
      case "Èó®Â§ñ‰∏úÂçó":
        return "·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÖ·ûë·üí·ûú·û∂·ûö·ûë·û∑·ûü·û¢·û∂·ûÇ·üí·ûì·üÅ·ûô·üç";
      case "Èó®Â§ñÊ≠£Âçó":
        return "·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÖ·ûë·üí·ûú·û∂·ûö·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûè·üí·ûî·ûº·ûÑ";
      case "Èó®Â§ñË•øÂçó":
        return "·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÖ·ûë·üí·ûú·û∂·ûö·ûë·û∑·ûü·ûì·û∑·ûö·ûè·û∏";
      case "Èó®Â§ñÊ≠£‰∏ú":
        return "·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÖ·ûë·üí·ûú·û∂·ûö·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûÄ·ûæ·ûè";
      case "Èó®Â§ñÊ≠£Ë•ø":
        return "·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÖ·ûë·üí·ûú·û∂·ûö·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûõ·û∑·ûÖ";
      case "Èó®Â§ñË•øÂåó":
        return "·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÖ·ûë·üí·ûú·û∂·ûö·ûë·û∑·ûü·ûñ·û∂·ûô·ûñ·üí·ûô";
      case "Èó®Â§ñÊ≠£Âåó":
        return "·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÖ·ûë·üí·ûú·û∂·ûö·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûá·ûæ·ûÑ";
      case "Èó®Â§ñ‰∏úÂåó":
        return "·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÖ·ûë·üí·ûú·û∂·ûö·ûë·û∑·ûü·û¶·ûü·û∂·ûì";
      case "Âé®ÁÅ∂Á¢ìÁ£®ÂÜÖ‰∏ú":
        return "·ûÄ·üí·ûì·ûª·ûÑ·ûï·üí·ûë·üá·ûî·û∂·ûô ·ûÄ·û∑·ûì·ûü·üí·ûö·ûº·ûú·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûÄ·ûæ·ûè";
      case "Âé®ÁÅ∂Á¢ìÁ£®ÂÜÖÂçó":
        return "·ûÄ·üí·ûì·ûª·ûÑ·ûï·üí·ûë·üá·ûî·û∂·ûô ·ûÄ·û∑·ûì·ûü·üí·ûö·ûº·ûú·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûè·üí·ûî·ûº·ûÑ";
      case "Âé®ÁÅ∂Á¢ìÁ£®ÂÜÖË•ø":
        return "·ûÄ·üí·ûì·ûª·ûÑ·ûï·üí·ûë·üá·ûî·û∂·ûô ·ûÄ·û∑·ûì·ûü·üí·ûö·ûº·ûú·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûõ·û∑·ûÖ";
      case "Âé®ÁÅ∂Á¢ìÁ£®ÂÜÖÂåó":
        return "·ûÄ·üí·ûì·ûª·ûÑ·ûï·üí·ûë·üá·ûî·û∂·ûô ·ûÄ·û∑·ûì·ûü·üí·ûö·ûº·ûú·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûá·ûæ·ûÑ";
      case "Âé®ÁÅ∂Á¢ìÁ£®Â§ñ‰∏ú":
        return "·ûÄ·üí·ûö·üÖ·ûï·üí·ûë·üá·ûî·û∂·ûô ·ûÄ·û∑·ûì·ûü·üí·ûö·ûº·ûú·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûÄ·ûæ·ûè";
      case "Âé®ÁÅ∂Á¢ìÁ£®Â§ñÂçó":
        return "·ûÄ·üí·ûö·üÖ·ûï·üí·ûë·üá·ûî·û∂·ûô ·ûÄ·û∑·ûì·ûü·üí·ûö·ûº·ûú·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûè·üí·ûî·ûº·ûÑ";
      case "Âé®ÁÅ∂Á¢ìÁ£®Â§ñË•ø":
        return "·ûÄ·üí·ûö·üÖ·ûï·üí·ûë·üá·ûî·û∂·ûô ·ûÄ·û∑·ûì·ûü·üí·ûö·ûº·ûú·ûë·û∑·ûü·ûÅ·û∂·ûÑ·ûõ·û∑·ûÖ";
      case "Âé®ÁÅ∂Á¢ìÁ£®Â§ñÂåó":
        return "Outside the kitchen stove and mortar, to the north";
      default:
        return text;
    }
  }

// Helper method to get the zodiac sign for a lunar day
  String _getZodiacForLunarDay(Lunar lunar) {
    final String chineseDayZodiac = lunar.getDayInGanZhi();
    String dayZodiac = chineseDayZodiac.substring(1); // Get the branch part only
    return _translateToKhmer(dayZodiac);
  }

// Get Auspicious Zodiac Signs (Day-Based Logic - Now Includes Combinations)
  List<String> _getAuspiciousZodiacSigns(Lunar lunar) {
    final currentZodiac = _getZodiacForLunarDay(lunar);
    final List<String> auspiciousZodiacs = [];

    switch (currentZodiac) {
      case "·ûá·ûº·ûè": // Rat
        auspiciousZodiacs.add("·ûÜ·üí·ûõ·ûº·ûú üêÇ"); // Ox
        auspiciousZodiacs.add("·ûú·ûÄ üêí"); // Monkey
        auspiciousZodiacs.add("·ûö·üÑ·ûÑ üêâ"); // Dragon
        break;
      case "·ûÜ·üí·ûõ·ûº·ûú": // Ox
        auspiciousZodiacs.add("·ûá·ûº·ûè üêÄ"); // Rat
        auspiciousZodiacs.add("·ûö·ûÄ·û∂ üêì"); // Rooster
        auspiciousZodiacs.add("·ûò·üí·ûü·û∂·ûâ·üã üêç"); // Snake
        break;
      case "·ûÅ·û∂·ûõ": // Tiger
        auspiciousZodiacs.add("·ûÖ üêï"); // Dog
        auspiciousZodiacs.add("·ûò·ûò·û∏ üêé"); // Horse
        break;
      case "·ûê·üÑ·üá": // Rabbit
        auspiciousZodiacs.add("·ûÄ·ûª·ûö üêñ"); // Pig
        auspiciousZodiacs.add("·ûò·ûò·üÇ üêê"); // Goat
        auspiciousZodiacs.add("·ûÖ üêï");// Dog
        break;
      case "·ûö·üÑ·ûÑ": // Dragon
        auspiciousZodiacs.add("·ûö·ûÄ·û∂ üêì"); // Rooster
        auspiciousZodiacs.add("·ûú·ûÄ üêí"); // Monkey
        auspiciousZodiacs.add("·ûá·ûº·ûè üêÄ"); // Rat
        break;
      case "·ûò·üí·ûü·û∂·ûâ·üã": // Snake
        auspiciousZodiacs.add("·ûÜ·üí·ûõ·ûº·ûú üêÇ"); // Ox
        auspiciousZodiacs.add("·ûö·ûÄ·û∂ üêì"); // Rooster
        auspiciousZodiacs.add("·ûú·ûÄ üêí"); // Monkey
        break;
      case "·ûò·ûò·û∏": // Horse
        auspiciousZodiacs.add("·ûò·ûò·üÇ üêê"); // Goat
        auspiciousZodiacs.add("·ûÖ üêï"); // Dog
        auspiciousZodiacs.add("·ûÅ·û∂·ûõ üêÖ");//Tiger
        break;
      case "·ûò·ûò·üÇ": // Goat
        auspiciousZodiacs.add("·ûò·ûò·û∏ üêé"); // Horse
        auspiciousZodiacs.add("·ûÄ·ûª·ûö üêñ"); // Pig
        auspiciousZodiacs.add("·ûê·üÑ·üá üêá");//Rabbit
        break;
      case "·ûú·ûÄ": // Monkey
        auspiciousZodiacs.add("·ûö·üÑ·ûÑ üêâ"); // Dragon
        auspiciousZodiacs.add("·ûò·üí·ûü·û∂·ûâ·üã üêç"); // Snake
        auspiciousZodiacs.add("·ûá·ûº·ûè üêÄ");// Rat
        break;
      case "·ûö·ûÄ·û∂": // Rooster
        auspiciousZodiacs.add("·ûö·üÑ·ûÑ üêâ"); // Dragon
        auspiciousZodiacs.add("·ûò·üí·ûü·û∂·ûâ·üã üêç"); // Snake
        auspiciousZodiacs.add("·ûÜ·üí·ûõ·ûº·ûú üêÇ");// Ox
        break;
      case "·ûÖ": // Dog
        auspiciousZodiacs.add("·ûê·üÑ·üá üêá"); // Rabbit
        auspiciousZodiacs.add("·ûò·ûò·û∏ üêé"); // Horse
        auspiciousZodiacs.add("·ûÅ·û∂·ûõ üêÖ");//Tiger
        break;
      case "·ûÄ·ûª·ûö": // Pig
        auspiciousZodiacs.add("·ûê·üÑ·üá üêá"); // Rabbit
        auspiciousZodiacs.add("·ûò·ûò·üÇ üêê"); // Goat
        break;
    }

    return auspiciousZodiacs.toSet().toList(); // Ensure unique values
  }

// Get Conflicting Zodiac Signs (Day-Based Logic - Now Includes Six Clashes)
  List<String> _getConflictingZodiacSigns(Lunar lunar) {
    final currentZodiac = _getZodiacForLunarDay(lunar);
    final List<String> conflictingZodiacs = [];

    switch (currentZodiac) {
      case "·ûá·ûº·ûè": // Rat
        conflictingZodiacs.add("·ûò·ûò·û∏ üêé"); // Horse
        break;
      case "·ûÜ·üí·ûõ·ûº·ûú": // Ox
        conflictingZodiacs.add("·ûò·ûò·üÇ üêê"); // Goat
        break;
      case "·ûÅ·û∂·ûõ": // Tiger
        conflictingZodiacs.add("·ûú·ûÄ üêí"); // Monkey
        break;
      case "·ûê·üÑ·üá": // Rabbit
        conflictingZodiacs.add("·ûö·ûÄ·û∂ üêì"); // Rooster
        break;
      case "·ûö·üÑ·ûÑ": // Dragon
        conflictingZodiacs.add("·ûÖ üêï"); // Dog
        break;
      case "·ûò·üí·ûü·û∂·ûâ·üã": // Snake
        conflictingZodiacs.add("·ûÄ·ûª·ûö üêñ"); // Pig
        break;
      case "·ûò·ûò·û∏": // Horse
        conflictingZodiacs.add("·ûá·ûº·ûè üêÄ"); // Rat
        break;
      case "·ûò·ûò·üÇ": // Goat
        conflictingZodiacs.add("·ûÜ·üí·ûõ·ûº·ûú üêÇ"); // Ox
        break;
      case "·ûú·ûÄ": // Monkey
        conflictingZodiacs.add("·ûÅ·û∂·ûõ üêÇ"); // Tiger
        break;
      case "·ûö·ûÄ·û∂": // Rooster
        conflictingZodiacs.add("·ûê·üÑ·üá üêá"); // Rabbit
        break;
      case "·ûÖ": // Dog
        conflictingZodiacs.add("·ûö·üÑ·ûÑ üêâ"); // Dragon
        break;
      case "·ûÄ·ûª·ûö": // Pig
        conflictingZodiacs.add("·ûò·üí·ûü·û∂·ûâ·üã üêç"); // Snake
        break;
    }

    return conflictingZodiacs;
  }

// Translate Chinese to Khmer
  String _translateToKhmer(String text) {
    // Updated to translate the Earthly Branches (day zodiacs)
    switch (text) {
      case "Â≠ê":
        return "·ûá·ûº·ûè";
      case "‰∏ë":
        return "·ûÜ·üí·ûõ·ûº·ûú";
      case "ÂØÖ":
        return "·ûÅ·û∂·ûõ";
      case "ÂçØ":
        return "·ûê·üÑ·üá";
      case "Ëæ∞":
        return "·ûö·üÑ·ûÑ";
      case "Â∑≥":
        return "·ûò·üí·ûü·û∂·ûâ·üã";
      case "Âçà":
        return "·ûò·ûò·û∏";
      case "Êú™":
        return "·ûò·ûò·üÇ";
      case "Áî≥":
        return "·ûú·ûÄ";
      case "ÈÖâ":
        return "·ûö·ûÄ·û∂";
      case "Êàå":
        return "·ûÖ";
      case "‰∫•":
        return "·ûÄ·ûª·ûö";
      default:
        return text;
    }
  }

  String _translateActivityToKhmer(String text) {
    // Updated to translate the Earthly Branches (day zodiacs)
    switch (text) {
       //activity
      case "ÂºÄÂÖâ":
        return "·ûî·ûæ·ûÄ·ûÄ·û∂·ûö·ûä·üí·ûã·û∂·ûì";
      case "Â°ëÁªò":
        return "·ûü·ûò·û∂·ûí·û∑";
      case "ÊñãÈÜÆ":
        return "·ûè·ûò·û¢·û∂·û†·û∂·ûö";
      case "Â´ÅÂ®∂":
        return "·ûö·üÄ·ûî·ûÄ·û∂·ûö";
      case "ÂÖ•ÊÆì":
        return "·ûî·ûâ·üí·ûÖ·ûª·üá·ûü·ûñ";
      case "ÁßªÊü©":
        return "·ûõ·ûæ·ûÄ·ûò·ûà·ûº·ûü";
      case "Ë∞¢Âúü":
        return "·û¢·ûö·ûÇ·ûª·ûé·ûë·ûπ·ûÄ·ûä·û∏";
      case "ÂÖ•Â≠¶":
        return "·ûö·ûÄ·û¢·üí·ûì·ûÄ·ûü·üí·ûì·ûÑ·ûò·ûö·ûè·ûÄ";
      case "‰ºêÊú®":
        return "·ûÄ·û∂·ûè·üã·ûü·ûÄ·üã";
      case "Ëµ¥‰ªª ":
        return "·ûÖ·ûº·ûõ·ûÄ·û∂·ûì·üã·ûè·üÜ·ûé·üÇ·ûÑ";
      case "‰øÆÈÄ†":
        return "·ûá·ûΩ·ûü·ûá·ûª·ûõ";
      case "Á•≠Á•Ä":
        return "·ûü·üÇ·ûì·ûë·üÅ·ûú·ûè·û∂ ·ûÄ·ûª·ûÑ·ûò·üâ·û∂";
      case "Á•àÁ¶è":
        return "·ûî·ûΩ·ûÑ·ûü·ûΩ·ûÑ·ûü·ûª·üÜ·ûõ·û∂·ûó ·ûü·ûª·üÜ·ûÄ·üí·ûè·û∏·ûü·ûª·ûÅ";
      case "Ê±ÇÂó£":
        return "·ûü·ûª·üÜ·ûÄ·ûº·ûì ·ûä·û∂·ûÄ·üã·ûÄ·ûº·ûì";
      case "Ëß£Èô§":
        return "·ûö·üÜ·ûä·üÑ·üá·ûÇ·üí·ûö·üÑ·üá ·ûä·üÑ·üá·û¢·üÜ·ûñ·ûæ";
      case "Á∫≥Èáá":
        return "·ûö·ûæ·ûü·ûñ·üÅ·ûõ·û∂·ûö·üÄ·ûî·ûÄ·û∂·ûö ·ûö·û∫·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏";
      case "ÂÜ†Á¨Ñ":
        return "·û≤·üí·ûô·ûÄ·ûº·ûì·ûü·üí·ûö·û∏·ûÖ·ûº·ûõ·ûò·üí·ûõ·ûî·üã";
      case "Âá∫ÁÅ´":
        return "·ûí·üí·ûú·ûæ·ûÇ·ûò·üí·ûö·üÑ·ûÑ·ûê·üí·ûò·û∏";
      case "ÊãÜÂç∏":
        return "·ûö·ûª·üá·ûö·ûæ·ûï·üí·ûë·üá ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ·ûö·ûÄ·ûü·ûª·û∏";
      case "Ëøõ‰∫∫Âè£":
        return "·ûö·ûæ·ûÖ·ûº·ûõ·ûï·üí·ûë·üá ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ·ûí·üí·ûú·ûæ·ûÄ·û∂·ûö·ûö·ûÄ·ûü·ûª·û∏·ûê·üí·ûò·û∏";
      case "ÂÆâÂ∫ä":
        return "·ûö·üÄ·ûî·û†·ûª·ûÑ·ûü·üä·ûª·ûô·ûÄ·üí·ûî·û∂·ûõ·ûä·üÜ·ûé·üÅ·ûÄ ·ûî·ûì·üí·ûë·ûî·üã·ûÇ·üÅ·ûÑ";
      case "Âä®Âúü":
        return "·ûî·ûª·ûÄ·ûÇ·üí·ûö·ûπ·üá ·ûî·ûæ·ûÄ·ûÄ·û∂·ûö·ûä·üí·ûã·û∂·ûì";
      case "‰∏äÊ¢Å":
        return "·ûä·üÜ·û°·ûæ·ûÑ·ûü·ûö·ûü·ûö·ûö·û∫·ûÖ·û∂·ûÄ·üã·ûï·üí·ûõ·ûÑ·üã·ûü·üÅ";
      case "ÈÄ†Â∫ô":
        return "·ûü·ûÑ·üã·ûë·û∏·ûä·üí·ûã·û∂·ûì·ûü·ûÄ·üí·ûÄ·û∂·ûö·üà·ûä·ûº·ûÖ·ûá·û∂·ûú·û∑·û†·üä·û∂";
      case "Êéò‰∫ï":
        return "·ûá·û∏·ûÄ·û¢·ûé·üí·ûè·ûº·ûÑ ·ûè·ûë·ûπ·ûÄ ·ûö·ûÄ·ûî·üí·ûö·ûó·ûñ·ûë·ûπ·ûÄ";
      case "ÂÆâËë¨":
        return "·ûä·ûÑ·üí·û†·üÇ·ûö·ûü·ûñ";
      case "‰ºö‰∫≤Âèã":
        return "·ûá·ûΩ·ûî·ûá·ûª·üÜ·ûü·û∂·ûÖ·üã·ûâ·û∂·ûè·û∑";
      case "ËÆ¢Áõü":
        return "·ûÖ·ûª·üá·ûÄ·ûª·ûÑ·ûè·üí·ûö·û∂ ·ûÖ·ûÑ·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí·ûò·üÅ·ûè·üí·ûö·û∏";
      case "Ë£ÅË°£":
        return "·ûÄ·û∂·ûè·üã·ûü·ûò·üí·ûõ·üÄ·ûÄ·ûî·üÜ·ûñ·û∂·ûÄ·üã";
      case "ÂêàÂ∏ê":
        return "·ûö·üÄ·ûî·ûî·ûì·üí·ûÖ·ûî·üã·ûÇ·ûº·ûö·ûü·üí·ûö·ûÄ·ûö·ûê·üí·ûò·û∏";
      case "ÂÆâÊú∫Ê¢∞":
        return "·ûè·ûò·üí·ûõ·ûæ·ûÑ·ûÇ·üí·ûö·ûø·ûÑ·ûÖ·ûÄ·üí·ûö";
      case "ÂÆâÈó®":
        return "·ûä·û∂·ûÄ·üã·ûë·üí·ûú·û∂·ûö·ûî·ûÑ·üí·û¢·ûº·ûÖ";
      case "Ëµ∑Âü∫":
        return "·ûü·ûº·ûè·üí·ûö·ûò·ûì·üí·ûè·ûî·ûâ·üí·ûÖ·ûª·üá·ûü·û∏·ûò·üâ·û∂";
      case "ÂÆöÁ£â":
        return "·ûî·ûª·ûÄ·ûÇ·üí·ûö·ûπ·üá";
      case "Á´ñÊü±":
        return "·ûä·üÜ·û°·ûæ·ûÑ·ûü·ûö·ûü·ûö";
      case "ÂêØÈíª":
        return "·ûÅ·ûΩ·ûÑ·ûö·û∫·ûü·üí·ûú·û∂·ûì·ûü·üÜ·ûé·ûÑ·üã";
      case "Èô§Êúç":
        return "·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·û∂·ûö·ûÄ·û∂·ûì·üã·ûë·ûª·ûÄ·üí·ûÅ";
      case "ÊàêÊúç":
        return "·ûü·üí·ûõ·üÄ·ûÄ·ûñ·û∂·ûÄ·üã·ûÄ·û∂·ûì·üã·ûë·ûª·ûÄ·üí·ûÅ";
      case "Á´ãÁ¢ë":
        return "·ûö·üÄ·ûî·ûò·üâ·ûª·ûÑ";
      case "Á†¥Âúü":
        return "·ûá·û∏·ûÄ·ûö·ûé·üí·ûè·üÖ";
      case "Âá∫Ë°å":
        return "·ûí·üí·ûú·ûæ·ûä·üÜ·ûé·ûæ·ûö";
      case "ÁßªÂæô":
        return "·ûî·üí·ûè·ûº·ûö·ûë·û∏·ûè·û∂·üÜ·ûÑ";
      case "ÂÖ•ÂÆÖ":
        return "·ûÖ·ûº·ûõ·ûï·üí·ûë·üá·ûê·üí·ûò·û∏";
      case "Á´ãÂà∏":
        return "·ûÖ·ûª·üá·ûÄ·ûª·ûÑ·ûè·üí·ûö·û∂";
      case "ÂºÄÂ∏Ç":
        return "·ûî·ûæ·ûÄ·û†·û∂·ûÑ";
      case "ÊîæÊ∞¥":
        return "·ûí·üí·ûú·ûæ·û¢·û∂·ûÑ·ûÖ·û∑·ûâ·üí·ûÖ·ûπ·ûò·ûè·üí·ûö·û∏";
      case "ÁêÜÂèë":
        return "·ûÄ·û∂·ûè·üã·ûü·ûÄ·üã";
      case "ÁΩÆ‰∫ß":
        return "·ûë·û∑·ûâ·û¢·ûÖ·ûõ·ûì·ûë·üí·ûö·ûñ·üí·ûô";
      case "Á∫≥Áïú":
        return "·ûë·û∑·ûâ·ûü·ûè·üí·ûú·ûÖ·û∑·ûâ·üí·ûÖ·ûπ·ûò";
      case "ÈÄ†ÁïúÁ®†":
        return "·ûî·ûÑ·üí·ûÄ·û∂·ûè·üã·ûñ·ûº·ûá·ûü·ûè·üí·ûú";
      case "‰ΩúÊ¢Å":
        return "·ûä·üÜ·û°·ûæ·ûÑ·ûÇ·üí·ûö·üÑ·ûÑ·ûü·üÜ·ûé·ûÑ·üã";
      case "‰ΩúÁÅ∂":
        return "·ûö·üÄ·ûî·ûÖ·ûÑ·üí·ûÄ·üí·ûö·û∂·ûì·ûî·û∂·ûô";
      case "ÂºÄÁîüÂùü":
        return "·ûá·û∏·ûÄ·ûï·üí·ûì·ûº·ûö";
      case "Ê≤êÊµ¥":
        return "·ûò·ûª·ûá·ûë·ûπ·ûÄ·ûÄ·û∂·ûè·üã·ûÜ·ûª·ûÑ";
      case "Êâ´Ëàç":
        return "·ûü·üÜ·û¢·û∂·ûè·ûï·üí·ûë·üá·ûö·û∫·ûë·û∏·ûè·û∂·üÜ·ûÑ";
      case "Á†¥Â±ã":
        return "·ûá·ûΩ·ûü·ûá·ûª·ûõ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ·ûö·û∫·ûï·üí·ûë·üá";
      case "ÂùèÂû£":
        return "·ûö·ûª·üá·ûö·ûî·ûÑ";
      case "È¶Ä‰∫ãÂãøÂèñ":
        return "·ûÄ·ûª·üÜ·ûí·üí·ûú·ûæ·û¢·üí·ûú·û∏·ûä·üÇ·ûõ·ûò·û∑·ûì·ûë·üÜ·ûì·ûÑ";
      case "ÂÆâÈ¶ô":
        return "·û¢·ûª·ûá·ûí·ûº·ûî·ûî·ûì·üã·ûü·üí·ûö·ûì·üã";
      case "ÈÄ†‰ªì":
        return "·ûü·ûÑ·üã·ûÉ·üí·ûõ·û∂·üÜ·ûÑ";
      case "Ëµ¥‰ªª":
        return "·ûë·ûë·ûΩ·ûõ·ûè·üÜ·ûé·üÇ·ûÑ·ûï·üí·ûõ·ûº·ûú·ûÄ·û∂·ûö";
      case "Á∫≥Â©ø":
        return "·ûë·ûë·ûΩ·ûõ·ûü·û∂·ûÖ·üã·ûê·üí·ûõ·üÉ";
      case "Âá∫Ë¥ßË¥¢":
        return "·ûõ·ûÄ·üã·ûÖ·üÅ·ûâ";
      default:
        return text;
    }
  }
  // Get Auspicious Activities
  String _getAuspiciousActivities(Lunar lunar) {
    final List<String> auspiciousActivities = lunar.getDayYi();
    final List<String> translatedActivities = auspiciousActivities.map((activity) => _translateActivityToKhmer(activity)).toList();
    return translatedActivities.join(', ');
  }

  // Get Inauspicious Activities
  String _getInauspiciousActivities(Lunar lunar) {
    final List<String> inauspiciousActivities = lunar.getDayJi();
    final List<String> translatedActivities = inauspiciousActivities.map((activity) => _translateActivityToKhmer(activity)).toList();
    return translatedActivities.join(', ');
  }

  // Navigate to the previous month
  void _previousMonth() {
    setState(() {
      _selectedDate = DateTime(_selectedDate.year, _selectedDate.month - 1, 1);
    });
  }

  // Navigate to the next month
  void _nextMonth() {
    setState(() {
      _selectedDate = DateTime(_selectedDate.year, _selectedDate.month + 1, 1);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: null, // Remove the title from here. It will be added to the body
        centerTitle: true,
      ),
      body: Stack(
        children: [
          // Full-screen background image
          Container(
            decoration: const BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/images/bg.jpg'),
                fit: BoxFit.cover,
              ),
            ),
          ),

          // Blur overlay
          BackdropFilter(
            filter: ui.ImageFilter.blur(sigmaX: 10.0, sigmaY: 10.0),
            child: Container(
              color: Colors.black.withValues(alpha: 0.3),
            ),
          ),

          // Main Content
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                SizedBox(height: kToolbarHeight + 50), // Add more space to avoid overlap with HomeScreen menu
                _buildTitle(),
                const SizedBox(height: 50),
                // Month and Year Navigation
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    IconButton(
                      icon: const Icon(Icons.arrow_back_ios, color: Colors.white),
                      onPressed: _previousMonth,
                    ),
                    Text(
                      '${_getMonthName(_selectedDate.month)} ${_selectedDate.year}',
                      style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                        fontFamily: 'Dangrek', // Apply font here
                      ),
                    ),
                    IconButton(
                      icon: const Icon(Icons.arrow_forward_ios, color: Colors.white),
                      onPressed: _nextMonth,
                    ),
                  ],
                ),
                const SizedBox(height: 0),

                // Lunar Calendar Grid
                Expanded(
                  child: GridView.count(
                    crossAxisCount: 7,
                    children: _buildCalendarGrid(),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Helper method to get the month name
  String _getMonthName(int month) {
    const List<String> monthNames = [
      '·ûò·ûÄ·ûö·û∂', '·ûÄ·ûª·ûò·üí·ûó·üá', '·ûò·û∏·ûì·û∂', '·ûò·üÅ·ûü·û∂', '·ûß·ûü·ûó·û∂', '·ûò·û∑·ûê·ûª·ûì·û∂',
      '·ûÄ·ûÄ·üí·ûÄ·ûä·û∂', '·ûü·û∏·û†·û∂', '·ûÄ·ûâ·üí·ûâ·û∂', '·ûè·ûª·ûõ·û∂', '·ûú·û∑·ûÖ·üí·ûÜ·û∑·ûÄ·û∂', '·ûí·üí·ûì·ûº'
    ];
    return monthNames[month - 1];
  }

  // Build Custom Title with Blur Glass Morphism
  Widget _buildTitle() {
    return ClipRRect(
      borderRadius: BorderRadius.circular(12), // Rounded corners
      child: BackdropFilter(
        filter: ui.ImageFilter.blur(sigmaX: 10.0, sigmaY: 10.0), // Blur effect
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            color: Colors.deepPurpleAccent.withValues(alpha: 0.3), // Semi-transparent white
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Colors.white.withValues(alpha: 0.3), // Light border
              width: 2.2,
            ),
          ),
          child: const Text(
            '·ûò·ûæ·ûõ·ûú·üÅ·ûõ·û∂·ûü·û∑·ûö·û∏·ûò·ûÑ·üí·ûÇ·ûõ',
            style: TextStyle(
              fontFamily: 'Dangrek',
              fontSize: 22,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
      ),
    );
  }
}